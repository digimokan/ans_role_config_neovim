-- vim: set filetype=lua:
-- ANSIBLE-MANAGED CONFIGURATION FILE
-- Ref: https://neovim.io/doc/user/options.html
--      https://neovim.io/doc/user/api.html

--------------------------------------------------------------------------------
-- SETTINGS
--------------------------------------------------------------------------------

-- ref: https://luacheck.readthedocs.io/en/stable/inline.html#inline-options

-- luacheck: globals vim

--------------------------------------------------------------------------------
-- SETTINGS
--------------------------------------------------------------------------------

-- TERMINAL SETTINGS

-- use truecolors in term (if vt support)
vim.opt.termguicolors = {{ use_24bit_true_colors_in_term }}
vim.opt.timeoutlen = {{ multikey_timeout_for_keymaps_ms }}
-- disable the built-in neovim netrw file manager (req for nvim-tree)
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

-- ALERT SETTINGS

-- issue audible alert bells
vim.opt.errorbells = {{ audio_bell_on_alert }}
-- issue visual alert bells
vim.opt.visualbell = {{ visual_bell_on_alert }}

-- FILE SAVE/LOAD SETTINGS

-- reload buffer if changed externally
vim.opt.autoread = {{ reload_buffer_if_changed_externally }}
-- save swapfiles
vim.opt.swapfile = {{ save_vim_swapfiles }}

-- CURSOR, LINES, COLUMN SETTINGS

-- cursor style: 'hor' (horizontal bar), 'ver' (vertical bar), 'block'
vim.opt.guicursor = "a:{{ cursor_style_for_all_modes }}"
-- shade active line
vim.opt.cursorline = {{ shade_active_line }}
-- set permanent colorschemed stripe along a vertical column number
vim.opt.colorcolumn = "{{ shade_vertical_column_num }}"
-- show line numbers
vim.opt.number = {{ show_line_nums_in_left_margin }}
-- keep at least n lines above or below the cursor
vim.opt.scrolloff = {{ show_n_lines_above_below_cursor }}
-- wrap long lines
vim.opt.wrap = {{ wrap_long_lines }}

-- TEXT DISPLAY SETTINGS

-- show matching paired chars with a brief secondary-cursor highlight
vim.opt.showmatch = {{ show_matching_brace_paren_pairs }}
-- show invisible characters
vim.opt.list = true
-- what to show for invisible characters
vim.opt.listchars = { tab = "{{ char_to_show_for_tab }}", trail = "{{ char_to_show_for_trailing_space }}", nbsp = "{{ char_to_show_for_nbsp }}" }

-- NEOVIM CMD-LINE (BELOW STATUSLINE) SETTINGS

-- show info when this min num of lines has been changed (0 for always)
vim.opt.report = {{ min_num_lines_to_show_cmd_info }}
-- show info about current mode ("INSERT", "VISUAL", etc)
vim.opt.showmode = {{ show_current_vim_mode_cmd_info }}
-- show info about current char/line selection size
vim.opt.showcmd = {{ show_line_and_col_cmd_info }}
-- show info for current cursor-pos line number and column number
vim.opt.ruler = {{ show_line_and_col_cmd_info }}
-- what to show or abbreviate for certain cmd-line messages
vim.opt.shortmess = "{{ msg_showing_criteria }}"

-- BUFFER-SEARCH SETTINGS

-- ignore case in search patterns
vim.opt.ignorecase = {{ ignore_case_in_buffer_search }}
-- override ignorecase (if true), and search case-sensitive if upper-case input
vim.opt.smartcase = {{ override_ignore_buffer_search_case_if_caps }}

-- EDITING SETTINGS

-- allow backspacing over certain non-character markers
vim.opt.backspace = { "indent", "eol", "start" }
-- auto-formatting: insert comment leader on starting new line
vim.opt.formatoptions:append("{{ 'r' if insert_comment_leader_on_new_line else ''}}")
-- auto-formatting: allow long line to continue without formatting, on editing
vim.opt.formatoptions:append("{{ 'l' if allow_long_line_to_continue else ''}}")

-- INDENT / TAB SETTINGS

-- number of spaces to use for each step of autoindent
vim.opt.shiftwidth = {{ num_spaces_to_use_for_auto_indent }}
-- round an indent to multiple of shiftwidth
vim.opt.shiftround = {{ round_indent_to_auto_indent_multiple }}
-- when inserting an input <TAB>, expand it to a series of spaces
vim.opt.expandtab = {{ expand_inserted_tabs_to_spaces }}
-- when expanding a <TAB>, use this number of spaces
vim.opt.softtabstop = {{ num_spaces_to_use_for_expanded_tabs }}
-- for file with existing tab, represent the tab as this number of spaces
vim.opt.tabstop = {{ show_existing_tabs_as_this_num_spaces }}
-- make inserted/new lines use same spaces or actual <TAB>s of existing lines
vim.opt.copyindent = {{ insert_tabs_when_surrounding_code_has_them }}
-- make insertions in existing line us same spaces or actual <TAB>s
vim.opt.preserveindent = {{ insert_tabs_when_surrounding_code_has_them }}

-- COPY / PASTE SETTINGS

vim.opt.clipboard = "{{ 'unnamedplus' if yank_and_paste_from_system_clipboard else '' }}"

-- UNDO / REDO SETTINGS

-- enable persistent undo/redo between editing sessions, via an undo file
vim.opt.undofile = {{ use_undo_file_for_peristent_undos }}

--------------------------------------------------------------------------------
-- KEYMAPS
--------------------------------------------------------------------------------

-- keymap function ref: https://neovim.io/doc/user/lua.html#vim.keymap.set()
-- default keymaps ref: http://neovim.io/doc/user/quickref.html

-- LOCAL MAPPING FUNCTIONS

local function map(mode, keys, action, desc, opts)
  local opts = opts or {}
  local map_opts = {}
  map_opts.desc = desc
  map_opts.silent = opts.silent or false
  map_opts.noremap = opts.noremap or true
  if opts.nowait then map_opts.nowait = opts.nowait end
  if opts.buffer then map_opts.buffer = opts.buffer end
  vim.keymap.set(mode, keys, action, map_opts)
end

local function unmap(mode, keys)
  map(mode, keys, "<nop>", "Unmapping")
end

-- UNMAPS

unmap("n", ":")

-- LEADER KEY

-- set the leader key
map("n", "{{ neovim_leader_key.map }}", "<nop>", "Leader Map", { silent = true })
vim.g.mapleader = "{{ neovim_leader_key.super }}"

-- MODE CHANGE KEYMAPS

-- enter normal-mode
map("n", "{{ keymap_enter_cmd_mode }}", ":", "Enter Neovim Cmd Mode")
-- enter insert-mode at start of line
map("n", "{{ keymap_enter_insert_mode_at_line_start }}", "0i", "Insert At Line Start")
-- enter visual-block-mode
map("n", "{{ keymap_enter_visual_block_mode }}", "<C-v>", "Visual Block Mode")

-- NAVIGATION KEYMAPS

-- move to the first non-whitespace char in the line
map({ "n", "v" }, "{{ keymap_move_to_start_of_line_no_wsp }}", "^", "Start Of Line (Non-Wsp)")
-- move to end of line
map({ "n", "v" }, "{{ keymap_move_to_end_of_line }}", "$", "End Of Line")
-- toggle back to previous buffer
map("n", "{{ keymap_toggle_to_prev_buffer }}", "<cmd>buffer#<cr>", "Prev Buffer", { silent = true })
-- move to prev edit pos (persistent, when use_undo_file_for_peristent_undos)
map("n", "{{ keymap_move_to_prev_edit_pos }}", "g;", "Prev Edit Pos", { silent = true })

-- QUIT / SAVE KEYMAPS

-- quit neovim
map("n", "{{ keymap_quit_neovim }}", "<cmd>quitall<cr>", "Quit Neovim")
-- save current split
map("n", "{{ keymap_save_file }}", "<cmd>wall<cr>", "Save Buffer")

-- SPLIT KEYMAPS

-- resize current split in horizontal or vertical dimension
map("n", "{{ keymap_inc_current_split_height }}", "<cmd>resize +1<cr>", "Inc Split Height", { silent = true })
map("n", "{{ keymap_dec_current_split_height }}", "<cmd>resize -1<cr>", "Dec Split Height", { silent = true })
map("n", "{{ keymap_dec_current_split_width }}", "<cmd>vertical resize -1<cr>", "Dec Split Width", { silent = true })
map("n", "{{ keymap_inc_current_split_width }}", "<cmd>vertical resize +1<cr>", "Inc Split Width", { silent = true })
-- rotate through all splits
map("n", "{{ keymap_rotate_through_splits }}", "<C-w>w", "Rotate Through Splits", { silent = true })
-- close current split
map("n", "{{ keymap_close_split }}", "<cmd>quit<cr>", "Close Split")

-- FOLD KEYMAPS

-- fold expand/collapse toggle
map("n", "{{ keymap_toggle_fold_expand_collapse }}", "za", "Toggle Fold Expand/Collapse", { silent = true })

-- BUFFER-SEARCH KEYMAPS

-- clear highlighted text from last search
map("n", "{{ keymap_clear_highlighted_search_text }}", "<cmd>nohlsearch<cr>", "Clear Highlighted Search Text")

-- search and replace in buffer
map("n", "{{ keymap_search_replace_in_buffer }}", ":%s//g<left><left>", "Search & Replace In Buffer")

-- INDENT / TAB KEYMAPS

-- allow repeat indenting of visual selection
map("v", "{{ keymap_indent_visual_selection_to_left }}", "<gv", "Indent To Left")
map("v", "{{ keymap_indent_visual_selection_to_right }}", ">gv", "Indent To Right")

-- COPY / PASTE KEYMAPS

-- copy to end of line
map("n", "{{ keymap_paste_below }}", "p=']", "Paste Below")
map("n", "{{ keymap_paste_above }}", "P=']", "Paste Above")
map("n", "{{ keymap_copy_to_end_of_line }}", "y$", "Yank To End Of Line")

-- UNDO / REDO KEYMAPS

map("n", "{{ keymap_undo_last_edit }}", "<cmd>undo<cr>", "Undo Last Edit")
map("n", "{{ keymap_redo_last_edit }}", "<cmd>redo<cr>", "Redo Last Edit")

--------------------------------------------------------------------------------
-- PLUGIN MANAGER BOOTSTRAP
--------------------------------------------------------------------------------

-- set path to plugin manager
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"

-- do one-time auto-install of the plugin manager
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local cmd_output = vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "--branch={{ lazy_nvim_vers.tag }}",
    "https://github.com/folke/lazy.nvim.git",
    lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { cmd_output, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end

-- set runtime-path for plugin manager and its plugins
vim.opt.rtp:prepend(lazypath)

--------------------------------------------------------------------------------
-- PLUGIN DEFINITIONS
--------------------------------------------------------------------------------

-- install individual plugins (at ~/.local/share/nvim/)
require("lazy").setup({

  -- manage lazy.nvim itself
  {
    url = "https://github.com/folke/lazy.nvim.git",
    tag = "{{ lazy_nvim_vers.tag }}",
    init = function()
      map("n", "{{ keymap_plugin_manager_menu }}", "<cmd>Lazy<cr>", "Plugin Manager")
    end,
  },

  -- onedark.nvim: colorscheme
  {
    url = "https://github.com/navarasu/onedark.nvim",
    commit = "{{ onedark_nvim_vers.commit }}",
    priority = 1000,
    opts = { style = "warm" },
    init = function() require("onedark").load() end,
  },

  -- lualine.nvim: statusline
  {
    url = "https://github.com/nvim-lualine/lualine.nvim",
    commit = "{{ lualine_nvim_vers.commit }}",
    dependencies = {
      { url = "https://github.com/barklan/capslock.nvim", commit = "{{ capslock_nvim_vers.commit }}" },
    },
    opts = {
      options = {
        icons_enabled = false,
        theme = "gruvbox-material",
        component_separators = { left = "│", right = "│"},
        section_separators = { left = "", right = ""},
      },
      sections = {
        lualine_a = { "mode" },
        lualine_b = { "branch" },
        lualine_c = { "filename", { function() return require("capslock").status_string() end } },
        lualine_x = { "diagnostics" },
        lualine_y = { "filetype", "fileformat", "encoding" },
        lualine_z = { "progress", "location" }
      },
      inactive_sections = {
        lualine_a = {},
        lualine_b = {},
        lualine_c = { "filename" },
        lualine_x = {},
        lualine_y = {},
        lualine_z = { "location" }
      },
    }, -- opts
  },

  -- nvim-tree.lua: file-explorer tree
  {
    url = "https://github.com/nvim-tree/nvim-tree.lua",
    commit = "{{ nvim_tree_lua_vers.commit }}",
    config = function()
      local function nvim_tree_on_attach(bufnr)
        local api = require "nvim-tree.api"
        map("n", "u", api.tree.change_root_to_parent, "Change CWD Up",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "s", api.tree.change_root_to_node, "Set Current As CWD",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "l", api.node.open.edit, "Open",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "h", api.node.navigate.parent_close, "Collapse",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "a", api.fs.create, "Create",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "m", api.fs.rename_sub, "Move Or Rename",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "e", api.fs.rename_basename, "Edit Filename",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "c", api.fs.copy.node, "Copy",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "p", api.fs.paste, "Paste",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "d", api.fs.remove, "Delete",
          { buffer = bufnr, silent = true, nowait = true })
        map("n", "?", api.tree.toggle_help, "Help",
          { buffer = bufnr, silent = true, nowait = true })
      end -- nvim_tree_on_attach()

      require("nvim-tree").setup {
        view = { width = 20, },
        renderer = { group_empty = true, },
        on_attach = nvim_tree_on_attach,
      }
    end, -- config function()
    init = function()
      map("n", "{{ keymap_open_file_browser_at_current_file }}", "<cmd>NvimTreeFindFile<cr>", "Open File Browser")
      map("n", "{{ keymap_close_file_browser }}", "<cmd>NvimTreeClose<cr>", "Close File Browser")
    end,
    lazy = true,
    cmd = "NvimTreeFindFile",
  },

  -- gitsigns.nvim: git integration
  {
    url = "https://github.com/lewis6991/gitsigns.nvim",
    commit = "{{ gitsigns_nvim_vers.commit }}",
    opts = {
      on_attach = function(bufnr)
        -- actions
        local gs = package.loaded.gitsigns
        map("n", "{{ keymap_git_next_hunk }}", gs.next_hunk, "Next Unstaged Git Hunk", { buffer = bufnr })
        map("n", "{{ keymap_git_prev_hunk }}", gs.prev_hunk, "Prev Unstaged Git Hunk", { buffer = bufnr })
        map("n", "{{ keymap_git_show_preview }}", gs.preview_hunk, "Git Show Preview", { buffer = bufnr })
        map("n", "{{ keymap_git_show_blame }}", function() gs.blame_line() end, "Git Show Blame", { buffer = bufnr })
        map("n", "{{ keymap_git_stage_hunk }}", gs.stage_hunk, "Git Stage Hunk", { buffer = bufnr })
        map("n", "{{ keymap_git_unstage_hunk }}", gs.undo_stage_hunk, "Git Unstage Hunk", { buffer = bufnr })

        -- text object
        map({"o", "x"}, "ih", ":<C-u>Gitsigns select_hunk<cr>", "Unstaged Git Hunk")
      end
    }, -- opts
  },

  -- nvim-autopairs: brace/paren insertion
  {
    url = "https://github.com/windwp/nvim-autopairs",
    commit = "{{ nvim_autopairs_vers.commit }}",
    config = true,
    lazy = true,
    event = "InsertEnter",
  },

  -- nvim-treesitter: buffer syntax parsing (and add-ons)
  {
    url = "https://github.com/nvim-treesitter/nvim-treesitter",
    commit = "{{ nvim_treesitter_vers.commit }}",
    opts = {
      -- per README, these parsers must always be installed
      ensure_installed = { "c", "lua", "vim", "vimdoc", "query", "markdown", "markdown_inline" },
      -- install 'ensure_installed' parsers synchronously (prevents races)
      sync_install = true,
      -- build a parser for the buffer's filetype automatically, on buff enter
      -- each parser is a .so file located in the treesitter plugin dir
      auto_install = true,
      -- treesitter built-in module for better syntax highlighting
      highlight = { enable = true, },
    }, -- opts
    -- need this, because of non-standard, treesitter MAIN module location
    main = "nvim-treesitter.configs",
    -- when treesitter plugin is installed or updated, re-build all parsers
    build = ":TSUpdate",
  },

  -- rainbow-delimiters.nvim: color-matched parentheses
  {
    url = "https://github.com/hiphish/rainbow-delimiters.nvim",
    commit = "{{ rainbow_delimiters_nvim_vers.commit }}",
  },

  -- indent-blankline.nvim: indentation guides
  {
    url = "https://github.com/lukas-reineke/indent-blankline.nvim",
    commit = "{{ indent_blankline_nvim_vers.commit }}",
  },

  -- nvim.spider: smarter camelcase/etc word motion
  {
    url = "https://github.com/chrisgrieser/nvim-spider",
    commit = "{{ nvim_spider_vers.commit }}",
    init = function()
      map({"n", "o", "x"}, "w", "<cmd>lua require('spider').motion('w')<cr>", "Next Word Start")
      map({"n", "o", "x"}, "e", "<cmd>lua require('spider').motion('e')<cr>", "Next Word End")
      map({"n", "o", "x"}, "b", "<cmd>lua require('spider').motion('b')<cr>", "Prev Word Start")
    end,
    lazy = true,
  },

  -- telescope.nvim: fuzzy filter, finder, and pick
  {
    url = "https://github.com/nvim-telescope/telescope.nvim",
    tag = "{{ telescope_nvim_vers.tag }}",
    dependencies = {
      { url = "https://github.com/nvim-lua/plenary.nvim",         commit = "{{ plenary_nvim_vers.commit }}" },
      { url = "https://github.com/debugloop/telescope-undo.nvim", commit = "{{ telescope_undo_nvim_vers.commit }}" },
    },
    config = function()
      require("telescope").setup {
        defaults = {
          -- make one press of ESC exit telescope, since it starts in insert mode
          mappings = { i = { ["<esc>"] = "close", ["<C-c>"] = false }, },
          vimgrep_arguments = { "{{ neovim_ripgrep_cmd }}", "--color=never", "--no-heading",
                                "--with-filename", "--line-number", "--column", "--smart-case" },
        }, -- defaults
        extensions = {
          undo = {
            mappings = { i = { ["<cr>"] = require("telescope-undo.actions").restore, }, },
          },
        }, -- extensions
      } -- require("telescope").setup
      require("telescope").load_extension("undo")
    end, --config = function()
    init = function()
      map("n", "{{ keymap_find_proj_files }}", function() require("telescope.builtin").find_files() end, "Find File In Project")
      map("n", "{{ keymap_find_open_buffer }}", function() require("telescope.builtin").buffers() end, "Find File In Buffers")
      map("n", "{{ keymap_open_undo_tree }}", "<cmd>Telescope undo<cr>", "Open Undo Tree")
      map("n", "{{ keymap_global_search_for_text }}", function() require("telescope.builtin").live_grep() end, "Search For Text")
      map("v", "{{ keymap_global_search_for_sel_text }}", function() require("telescope.builtin").grep_string() end, "Search For Sel Text")
    end,
    lazy = true,
    cmd = "Telescope",
  },

  -- which-key.nvim: pop-up display for keymaps
  {
    url = "https://github.com/folke/which-key.nvim",
    commit = "{{ which_key_nvim_vers.commit }}",
    config = function()
      require("which-key").register({
        ["<C-l>"] = "which_key_ignore", ["<C-w>"] = "which_key_ignore",
        ["$"] = "which_key_ignore", ["&"] = "which_key_ignore", ["^"] = "which_key_ignore",
        ["{"] = "which_key_ignore", ["}"] = "which_key_ignore", ["["] = "which_key_ignore",
        ["]"] = "which_key_ignore", ["!"] = "which_key_ignore", ["'"] = "which_key_ignore",
        ['"'] = "which_key_ignore", ["`"] = "which_key_ignore", ['@'] = "which_key_ignore",
        ['F'] = "which_key_ignore", ["H"] = "which_key_ignore", ["L"] = "which_key_ignore",
        ["M"] = "which_key_ignore", ["T"] = "which_key_ignore", ["h"] = "which_key_ignore",
        ["j"] = "which_key_ignore", ["k"] = "which_key_ignore", ["l"] = "which_key_ignore",
      })
    end,
    cmd = "WhichKey",
    keys = "{{ neovim_leader_key.map }}",
    init = function()
      map("n", "{{ keymap_show_all_keymaps }}", "<cmd>WhichKey<cr>", "Keymap Help Screen")
    end,
  },

  -- nvim-cmp: auto-completion
  {
    url = "https://github.com/hrsh7th/nvim-cmp",
    commit = "{{ nvim_cmp_vers.commit }}",
    dependencies = {
      { url = "https://github.com/hrsh7th/cmp-buffer", commit = "{{ cmp_buffer_vers.commit }}" },
      { url = "https://github.com/hrsh7th/cmp-path", commit = "{{ cmp_path_vers.commit }}" },
      { url = "https://github.com/hrsh7th/cmp-nvim-lsp", commit = "{{ cmp_nvim_lsp_vers.commit }}" },
      { url = "https://github.com/L3MON4D3/LuaSnip", commit = "{{ luasnip_vers.commit }}" },
      { url = "https://github.com/saadparwaiz1/cmp_luasnip", commit = "{{ cmp_luasnip_vers.commit }}" },
    },
    config = function() require'cmp'.setup{
      snippet = { expand = function(args) require"luasnip".lsp_expand(args.body) end, },
      mapping = require"cmp".mapping.preset.insert{
        ["<space>"] = require"cmp".mapping.confirm{ select = false },
      },
      sources = require"cmp".config.sources{
        { name = "buffer" },
        { name = "path" },
        { name = "nvim_lsp" },
        { name = "luasnip" },
      },
    } end,
  },

  -- nvim-lspconfig: configure neovim's builtin LSP client
  {
    url = "https://github.com/neovim/nvim-lspconfig",
    commit = "{{ nvim_lspconfig_vers.commit }}",
    dependencies = {
      { url = "https://github.com/hrsh7th/nvim-cmp", commit = "{{ nvim_cmp_vers.commit }}" },
      { url = "https://github.com/nvim-telescope/telescope.nvim", commit = "{{ telescope_nvim_vers.tag }}" },
    },
    init = function()
      -- configure externally-installed LSP servers via their their CLI options
      -- ref: https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion#nvim-cmp
      local lsp_servers = { {{ neovim_lsp_server_cmd_list | map("regex_replace", "(.+)", "\"\\1\"") | join(", ") }} }
      local cmp_capabilities = require("cmp_nvim_lsp").default_capabilities()
      for _, cmd in ipairs(lsp_servers) do
        require("lspconfig")[cmd].setup{ capabilities = cmp_capabilities, }
      end
      -- set LSP keymaps that take effect when an LSP server attaches
      -- ref: https://github.com/neovim/nvim-lspconfig#suggested-configuration
      vim.api.nvim_create_autocmd("LspAttach", {
        group = vim.api.nvim_create_augroup("UserLspConfig", {}),
        callback = function(event)
          map("n", "{{ keymap_switch_to_source_or_header }}", "<cmd>ClangdSwitchSourceHeader<cr>", "Switch Source/Header", { buffer = event.buf })
          map("n", "{{ keymap_lsp_declaration }}", vim.lsp.buf.declaration, "LSP Decl", { buffer = event.buf })
          map("n", "{{ keymap_lsp_definition }}", vim.lsp.buf.definition, "LSP Def", { buffer = event.buf })
          map("n", "{{ keymap_lsp_type_definition }}", vim.lsp.buf.type_definition, "LSP Type Def", { buffer = event.buf })
          map("n", "{{ keymap_lsp_hover }}", vim.lsp.buf.hover, "LSP Hover", { buffer = event.buf })
          map("n", "{{ keymap_lsp_implementations }}", function() require("telescope.builtin").lsp_implementations() end,
            "LSP Impls", { buffer = event.buf })
          map("n", "{{ keymap_lsp_references }}", function() require("telescope.builtin").lsp_references() end,
            "LSP Refs", { buffer = event.buf })
          map("n", "{{ keymap_lsp_calls }}", function() require("telescope.builtin").lsp_incoming_calls() end,
            "LSP Calls", { buffer = event.buf })
          map("n", "{{ keymap_lsp_rename }}", vim.lsp.buf.rename, "LSP Rename", { buffer = event.buf })
        end,
      })
    end, -- init
  },

  -- comment.nvim: code commenting
  {
    url = "https://github.com/numToStr/Comment.nvim",
    commit = "{{ comment_nvim_vers.commit }}",
    opts = {
      toggler = { line = "{{ keymap_comment_toggle }}" },
      opleader = { line = "{{ keymap_comment_toggle }}" },
      mappings = { basic = true, extra = false },
    },
  },

  -- nvim-spectre: global search and replace
  {
    url = "https://github.com/nvim-pack/nvim-spectre",
    commit = "{{ nvim_spectre_vers.commit }}",
    opts = {
      find_engine = { ["rg"] = { cmd = "{{ neovim_ripgrep_cmd }}" } },
      mapping = {
        ["run_replace"] = {
          map = "<leader>R",
          cmd = "<cmd>lua require('spectre.actions').run_replace()<cr>",
          desc = "Run Replace All",
        },
        ["change_view_mode"] = {
          map = "tv",
          cmd = "<cmd>lua require('spectre').change_view()<cr>",
          desc = "Change View Mode"
        },
      },
    },
    init = function()
      map("n", "{{ keymap_global_replace_text }}", "<cmd>lua require('spectre').toggle()<cr>", "Toggle Search & Replace")
    end,
  },

  -- capslock.nvim: toggle insert-mode-only caps-lock
  {
    url = "https://github.com/barklan/capslock.nvim",
    commit = "{{ capslock_nvim_vers.commit }}",
    config = true,
    init = function()
      map("i", "{{ keymap_toggle_insert_mode_capslock }}", "<plug>CapsLockToggle", "Toggle Caps-Lock")
    end,
  },

  -- text-case.nvim: chane word case
  {
    url = "https://github.com/johmsalas/text-case.nvim",
    commit = "{{ text_case_nvim_vers.commit }}",
    config = true,
    init = function()
      map("n", "{{ keymap_change_word_case_lower }}", function() require("textcase").current_word("to_lower_case") end, "Change Word Case Lower")
      map("n", "{{ keymap_change_word_case_upper }}", function() require("textcase").current_word("to_upper_case") end, "Change Word Case Upper")
      map("n", "{{ keymap_change_word_case_title }}", function() require("textcase").current_word("to_title_case") end, "Change Word Case Title")
    end,
  },

  -- nvim-surround: select/change surrounding delimiter pairs
  {
    url = "https://github.com/kylechui/nvim-surround",
    commit = "{{ nvim_surround_vers.commit }}",
    config = true,
  },

  -- nvim-lint: run external linters, and display output via neovim LSP
  {
    url = "https://github.com/mfussenegger/nvim-lint",
    commit = "{{ nvim_lint_vers.commit }}",
    init = function()
      require("lint").linters_by_ft = {
        {% for linter in neovim_linters %}
        {{ linter.filetype }}{{ " = {\"" }}{{ linter.cmd }}{{ "\"}," }}
        {% endfor %}
      }
      vim.api.nvim_create_autocmd({"BufEnter", "BufWritePost" }, {
        callback = function() require("lint").try_lint() end,
      })
    end,
  },

  -- trouble.nvim: display warning/error diagnostics
  {
    url = "https://github.com/folke/trouble.nvim",
    commit = "{{ trouble_nvim_vers.commit }}",
    opts = {
      icons = false,
      use_diagnostic_signs = true,
      cycle_results = false,
      action_keys = {
        jump_close = "o", toggle_mode = "m", switch_severity = "s",
        hover = "l", toggle_fold = ",", help = "?",
      },
    },
    init = function()
      map("n", "{{ keymap_diagnostics_hover }}", vim.diagnostic.open_float, "Diagnostic Line")
      map("n", "{{ keymap_diagnostics_list }}", function() require("trouble").toggle() end, "Diagnostic List")
      map("n", "{{ keymap_diagnostics_next }}", vim.diagnostic.goto_next, "Diagnostic Next")
      map("n", "{{ keymap_diagnostics_prev }}", vim.diagnostic.goto_prev, "Diagnostic Prev")
    end,
  },

  -- LuaSnip: snippets
  {
    url = "https://github.com/L3MON4D3/LuaSnip",
    commit = "{{ luasnip_vers.commit }}",
    init = function()
      map({"i", "s"}, "<S-right>", function() require("luasnip").jump(1) end, "Next Snippet Marker")
      map({"i", "s"}, "<S-left>", function() require("luasnip").jump(-1) end, "Prev Snippet Marker")
      require("luasnip.loaders.from_lua").load({paths = "{{ neovim_user_snippets_dir }}"})
    end,
  },

}) -- require("lazy").setup({

